import pygame


BLUE = (0,0,255)
WHITE = (255,255,255)
PI = 3.14159
"""
0: space inside the block
1: horizontal line
2: vertical line
3: intersection
"""

def board_1():
    """
    setup of 1st level environment
    18 rows, 25 columns
    """
    board = [[0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,2,0,0,0],
            [0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,2,0,0,0],
            [1,1,1,1,3,1,1,1,1,1,1,1,3,1,1,1,1,1,1,1,3,1,1,1,1,1,3,1,1,1],
            [0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,2,0,0,0],
            [0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,2,0,0,0],
            [0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,2,0,0,0],
            [1,1,1,1,3,1,1,1,1,1,1,1,3,1,1,1,1,1,1,1,3,1,1,1,1,1,3,1,1,1],
            [0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,2,0,0,0],
            [0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,2,0,0,0],
            [0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,2,0,0,0],
            [1,1,1,1,3,1,1,1,1,1,1,1,3,1,1,1,1,1,1,1,3,1,1,1,1,1,3,1,1,1],
            [0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,2,0,0,0],
            [0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,2,0,0,0],
            [0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,2,0,0,0],
            [1,1,1,1,3,1,1,1,1,1,1,1,3,1,1,1,1,1,1,1,3,1,1,1,1,1,3,1,1,1],
            [0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,2,0,0,0],
            [0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,2,0,0,0],
            [0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,2,0,0,0]]
    return board


def board_2():
    """setup of level 2 environment"""
    board = [[0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,2,0],
            [0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,2,0],
            [1,3,1,1,1,1,1,1,1,3,1,1,1,1,1,1,1,3,1,1,1,1,1,3,1],
            [0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,2,0],
            [0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,2,0],
            [0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,2,0],
            [1,3,1,1,1,1,1,1,1,3,1,1,1,1,1,1,1,3,1,1,1,1,1,3,1],
            [0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,2,0],
            [0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,2,0],
            [0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,2,0],
            [1,3,1,1,1,1,1,1,1,3,1,1,1,1,1,1,1,3,1,1,1,1,1,3,1],
            [0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,2,0],
            [0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,2,0],
            [0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,2,0],
            [1,3,1,1,1,1,1,1,1,3,1,1,1,1,1,1,1,3,1,1,1,1,1,3,1],
            [0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,2,0],
            [0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,2,0],
            [0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,0,0,0,0,0,2,0]]


def board_3():
    """setup of level 3 environment"""
    """
    0: empty space, 1: dot, 2: big dot, 3: vertical line, 4: horizontal line
    5: top right, 6: top left, 7: bot_left corner, 8 = bot_right corner
    9: gate
    """
    boards = [
        [6,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,5],
        [3,6,4,4,4,4,4,4,4,4,4,4,4,4,5,6,4,4,4,4,4,4,4,4,4,4,4,4,5,3],
        [3,3,1,1,1,1,1,1,1,1,1,1,1,1,3,3,1,1,1,1,1,1,1,1,1,1,1,1,3,3],
        [3,3,1,6,4,4,5,1,6,4,4,4,5,1,3,3,1,6,4,4,4,5,1,6,4,4,5,1,3,3],
        [3,3,2,3,0,0,3,1,3,0,0,0,3,1,3,3,1,3,0,0,0,3,1,3,0,0,3,2,3,3],
        [3,3,1,7,4,4,8,1,7,4,4,4,8,1,7,8,1,7,4,4,4,8,1,7,4,4,8,1,3,3],
        [3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3],
        [3,3,1,6,4,4,5,1,6,5,1,6,4,4,4,4,4,4,5,1,6,5,1,6,4,4,5,1,3,3],
        [3,3,1,7,4,4,8,1,3,3,1,7,4,4,5,6,4,4,8,1,3,3,1,7,4,4,8,1,3,3],
        [3,3,1,1,1,1,1,1,3,3,1,1,1,1,3,3,1,1,1,1,3,3,1,1,1,1,1,1,3,3],
        [3,7,4,4,4,4,5,1,3,7,4,4,5,0,3,3,0,6,4,4,8,3,1,6,4,4,4,4,8,3],
        [3,0,0,0,0,0,3,1,3,6,4,4,8,0,7,8,0,7,4,4,5,3,1,3,0,0,0,0,0,3],
        [3,0,0,0,0,0,3,1,3,3,0,0,0,0,0,0,0,0,0,0,3,3,1,3,0,0,0,0,0,3],
        [8,0,0,0,0,0,3,1,3,3,0,6,4,4,9,9,4,4,5,0,3,3,1,3,0,0,0,0,0,7],
        [4,4,4,4,4,4,8,1,7,8,0,3,0,0,0,0,0,0,3,0,7,8,1,7,4,4,4,4,4,4],
        [0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,0,0,0,3,0,0,0,1,0,0,0,0,0,0,0],
        [4,4,4,4,4,4,5,1,6,5,0,3,0,0,0,0,0,0,3,0,6,5,1,6,4,4,4,4,4,4],
        [5,0,0,0,0,0,3,1,3,3,0,7,4,4,4,4,4,4,8,0,3,3,1,3,0,0,0,0,0,6],
        [3,0,0,0,0,0,3,1,3,3,0,0,0,0,0,0,0,0,0,0,3,3,1,3,0,0,0,0,0,3],
        [3,0,0,0,0,0,3,1,3,3,0,6,4,4,4,4,4,4,5,0,3,3,1,3,0,0,0,0,0,3],
        [3,6,4,4,4,4,8,1,7,8,0,7,4,4,5,6,4,4,8,0,7,8,1,7,4,4,4,4,5,3],
        [3,3,1,1,1,1,1,1,1,1,1,1,1,1,3,3,1,1,1,1,1,1,1,1,1,1,1,1,3,3],
        [3,3,1,6,4,4,5,1,6,4,4,4,5,1,3,3,1,6,4,4,4,5,1,6,4,4,5,1,3,3],
        [3,3,1,7,4,5,3,1,7,4,4,4,8,1,7,8,1,7,4,4,4,8,1,3,6,4,8,1,3,3],
        [3,3,2,1,1,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,1,1,2,3,3],
        [3,7,4,5,1,3,3,1,6,5,1,6,4,4,4,4,4,4,5,1,6,5,1,3,3,1,6,4,8,3],
        [3,6,4,8,1,7,8,1,3,3,1,7,4,4,5,6,4,4,8,1,3,3,1,7,8,1,7,4,5,3],
        [3,3,1,1,1,1,1,1,3,3,1,1,1,1,3,3,1,1,1,1,3,3,1,1,1,1,1,1,3,3],
        [3,3,1,6,4,4,4,4,8,7,4,4,5,1,3,3,1,6,4,4,8,7,4,4,4,4,5,1,3,3],
        [3,3,1,7,4,4,4,4,4,4,4,4,8,1,7,8,1,7,4,4,4,4,4,4,4,4,8,1,3,3],
        [3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,3],
        [3,7,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,8,3],
        [7,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,8]
         ]
    return boards


def draw_environment(screen,width, height, level):
    # choose the correct board correlation with the level
    if level == 1:
        board  = board_1()
    elif level == 2:
        board = board_2()
    else:
        board = board_3()

    # calculate the coefficient of the x, y band width
    coeff_x = 25
    coeff_y = 25
    # coeff_x = width//len(board[0])
    # coeff_y = (height-50)//len(board)
    # for i, row in enumerate(board):
    #     for j, item in enumerate(row):
    #         if item == 1:  #horizontal line
    #             pygame.draw.line(screen, BLUE , [j*coeff_x, i*coeff_y], [j*coeff_x+coeff_x,i*coeff_y], 3)
    #             pygame.draw.line(screen, BLUE, [j*coeff_x, i*coeff_y+coeff_y], [j*coeff_x+coeff_x, i*coeff_y+coeff_y], 3)
    #         elif item == 2:  #vertical line
    #             pygame.draw.line(screen, BLUE , [j*coeff_x, i*coeff_y], [j*coeff_x,i*coeff_y+coeff_y], 3)
    #             pygame.draw.line(screen, BLUE , [j*coeff_x+coeff_x, i*coeff_y], [j*coeff_x+coeff_x,i*coeff_y+coeff_y], 3)        
    for i in range(len(board)):
        for j in range(len(board[i])):
            coord = board[i][j]  # if coord == 0: blank space
            if coord == 1:  # the small dot
                pygame.draw.circle(screen, WHITE, (j*coeff_x+coeff_x//2, i*coeff_y+coeff_y//2), 4)
            elif coord == 2:  # the bog dot
                pygame.draw.circle(screen, WHITE, (j*coeff_x+coeff_x//2, i*coeff_y+coeff_y//2), 10)
            elif coord == 3:  # verticle line
                pygame.draw.line(screen, BLUE, (j*coeff_x+coeff_x//2, i*coeff_y), 
                                 (j*coeff_x+coeff_x//2, (i+1)*coeff_y), 3)
            elif coord == 4:  # horizontal line
                pygame.draw.line(screen, BLUE, (j*coeff_x, (i+0.5)*coeff_y), 
                                 ((j+1)*coeff_x, (i+0.5)*coeff_y), 3)
            elif coord == 5:  # the top right arc of a block  (x, y, width, height)
                pygame.draw.arc(screen, BLUE, (j*coeff_x-(coeff_x*0.4)-2, i*coeff_y+coeff_x//2-2, coeff_x, coeff_y),
                                0, PI/2, 3)
            elif coord == 6:  # the top left arc of a block
                pygame.draw.arc(screen, BLUE, (j*coeff_x+(coeff_x*0.5), i*coeff_y+(coeff_x//2)-2, coeff_x, coeff_y),
                                PI/2, PI, 3)
            elif coord == 7:  # the bottom left
                pygame.draw.arc(screen, BLUE, (j*coeff_x+coeff_x//2, i*coeff_y-0.4*coeff_y, coeff_x, coeff_y), 
                                PI, 3*PI/2, 3)
            elif coord == 8:  # the bottom right
                pygame.draw.arc(screen, BLUE, 
                                (j*coeff_x-(coeff_x*0.4)-2, i*coeff_y-0.4*coeff_y, coeff_x, coeff_y),
                                3*PI/2, 2*PI, 3)
            elif coord == 9:  # the gate
                pygame.draw.line(screen, WHITE, (j*coeff_x, (i+0.5)*coeff_y), ((j+1)*coeff_x, (i+0.5)*coeff_y), 3)
